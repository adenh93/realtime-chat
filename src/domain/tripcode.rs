use argon2::password_hash::{Error, PasswordHasher, SaltString};
use argon2::Argon2;
use rand::rngs::OsRng;
use std::fmt::Display;

const TRIPCODE_LENGTH: usize = 10;

/// A Tripcode is generated by hashing a user provided password,
/// and taking the last 10 characters of the hash.
///
/// A Tripcode allows our chat application to identify unique nicknames
/// without needing to persist any information about connected users.
///
#[derive(Debug)]
pub struct Tripcode(String);

impl Display for Tripcode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.0)
    }
}

impl TryFrom<String> for Tripcode {
    type Error = Error;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        let bytes = value.as_bytes();
        let salt = SaltString::generate(&mut OsRng);

        let argon2 = Argon2::default();
        let hash = argon2.hash_password(bytes, &salt)?.to_string();

        // Take the last 10 characters of the generated hash
        let last_ten_chars = hash
            .chars()
            .skip(hash.len() - TRIPCODE_LENGTH)
            .take(TRIPCODE_LENGTH)
            .collect();

        Ok(Self(last_ten_chars))
    }
}
